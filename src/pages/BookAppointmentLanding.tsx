import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowLeft, Calendar as CalendarIcon, Clock, User, Phone, Mail, FileText, Download } from 'lucide-react';
import { format } from 'date-fns';
import { toast } from 'sonner';
import { useSymptoms, useMedicalRecords, useUserProfile } from '@/hooks/useSupabaseData';
import { generatePDFReport } from '@/utils/pdfGenerator';
import { generateMedicalRecordPDF, generateAllMedicalRecordsPDF } from '@/utils/medicalRecordsPdfGenerator';
import HealthDataSharingDialog from '@/components/HealthDataSharingDialog';

const BookAppointmentLanding = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const symptomId = searchParams.get('symptom');
  
  const [selectedDate, setSelectedDate] = useState<Date | undefined>();
  const [selectedTime, setSelectedTime] = useState('');
  const [doctorName, setDoctorName] = useState('');
  const [specialty, setSpecialty] = useState('');
  const [reason, setReason] = useState('');
  const [doctorEmail, setDoctorEmail] = useState('');
  const [doctorPhone, setDoctorPhone] = useState('');
  const [attachHealthReport, setAttachHealthReport] = useState(true);
  const [selectedMedicalRecords, setSelectedMedicalRecords] = useState<string[]>([]);
  
  const { data: symptoms } = useSymptoms();
  const { data: medicalRecords } = useMedicalRecords();
  const { data: userProfile } = useUserProfile();
  
  const selectedSymptom = symptoms?.find(s => s.id === symptomId);

  useEffect(() => {
    if (selectedSymptom) {
      setReason(`Consultation regarding ${selectedSymptom.symptom} symptoms`);
    }
  }, [selectedSymptom]);

  const timeSlots = [
    '09:00', '09:30', '10:00', '10:30', '11:00', '11:30',
    '12:00', '12:30', '13:00', '13:30', '14:00', '14:30',
    '15:00', '15:30', '16:00', '16:30', '17:00', '17:30'
  ];

  const specialties = [
    'General Practice',
    'Internal Medicine', 
    'Cardiology',
    'Dermatology',
    'Neurology',
    'Gastroenterology',
    'Orthopedics',
    'Psychiatry',
    'Other'
  ];

  const handleMedicalRecordToggle = (recordId: string) => {
    setSelectedMedicalRecords(prev => 
      prev.includes(recordId) 
        ? prev.filter(id => id !== recordId)
        : [...prev, recordId]
    );
  };

  const generateAppointmentSummary = async () => {
    try {
      const attachments: string[] = [];

      // Generate comprehensive health report if selected
      if (attachHealthReport) {
        // This would generate the main health report
        attachments.push('Comprehensive_Health_Report.pdf');
      }

      // Generate medical records PDFs if selected
      if (selectedMedicalRecords.length > 0) {
        const selectedRecords = medicalRecords?.filter(record => 
          selectedMedicalRecords.includes(record.id)
        ) || [];
        
        selectedRecords.forEach(record => {
          attachments.push(`Medical_Record_${record.title.replace(/\s+/g, '_')}.pdf`);
        });

        // Also generate a combined medical records PDF
        if (selectedRecords.length > 1) {
          attachments.push('All_Medical_Records_Combined.pdf');
        }
      }

      const appointmentDetails = `
APPOINTMENT BOOKING SUMMARY

Patient Information:
Name: ${userProfile?.full_name || 'Not provided'}
Phone: ${userProfile?.phone || 'Not provided'}

Healthcare Provider:
Doctor: Dr. ${doctorName}
Specialty: ${specialty}
Email: ${doctorEmail}
Phone: ${doctorPhone}

Appointment Details:
Date: ${selectedDate ? format(selectedDate, 'EEEE, MMMM dd, yyyy') : 'Not selected'}
Time: ${selectedTime}
Reason: ${reason}

${selectedSymptom ? `
Related Symptom:
${selectedSymptom.symptom} (Severity: ${selectedSymptom.severity}/10)
Logged: ${format(new Date(selectedSymptom.logged_at || selectedSymptom.created_at), 'MMM dd, yyyy')}
${selectedSymptom.description ? `Description: ${selectedSymptom.description}` : ''}
` : ''}

Attachments Prepared:
${attachments.map(attachment => `â€¢ ${attachment}`).join('\n')}

Generated by Sympto Health Tracking Application
${format(new Date(), 'MMMM dd, yyyy HH:mm')}
      `;

      await navigator.clipboard.writeText(appointmentDetails);
      toast.success('Appointment summary copied to clipboard! You can now contact your healthcare provider with this information.');
      
    } catch (error) {
      console.error('Error generating appointment summary:', error);
      toast.error('Failed to generate appointment summary');
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedDate || !selectedTime || !doctorName || !specialty) {
      toast.error('Please fill in all required fields');
      return;
    }

    await generateAppointmentSummary();
    
    toast.success('Appointment information prepared! Contact your healthcare provider to confirm the booking.');
    
    // Navigate back or to appointments page
    navigate('/calendar');
  };

  return (
    <div className="p-4 pb-20 max-w-2xl mx-auto">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <button 
            onClick={() => navigate(-1)}
            className="p-2 rounded-full hover:bg-gray-100 transition-colors mr-3"
          >
            <ArrowLeft className="w-5 h-5 text-gray-600" />
          </button>
          <h1 className="text-2xl font-bold text-gray-900">Book Appointment</h1>
        </div>
      </div>

      {/* Symptom Context Card */}
      {selectedSymptom && (
        <Card className="mb-6 border-[#2ecac8]">
          <CardHeader>
            <CardTitle className="text-[#338886] flex items-center">
              <FileText className="w-5 h-5 mr-2" />
              Appointment for Symptom
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="font-medium">{selectedSymptom.symptom}</span>
                <span className="px-2 py-1 bg-[#2ecac8] text-white rounded-full text-sm">
                  Severity: {selectedSymptom.severity}/10
                </span>
              </div>
              <p className="text-sm text-gray-600">
                Logged: {format(new Date(selectedSymptom.logged_at || selectedSymptom.created_at), 'MMM dd, yyyy')}
              </p>
              {selectedSymptom.description && (
                <p className="text-sm text-gray-700">{selectedSymptom.description}</p>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Healthcare Provider Information */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <User className="w-5 h-5 mr-2" />
              Healthcare Provider
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="doctorName">Doctor Name *</Label>
                <Input
                  id="doctorName"
                  value={doctorName}
                  onChange={(e) => setDoctorName(e.target.value)}
                  placeholder="Dr. Smith"
                  required
                />
              </div>
              <div>
                <Label htmlFor="specialty">Specialty *</Label>
                <Select value={specialty} onValueChange={setSpecialty}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select specialty" />
                  </SelectTrigger>
                  <SelectContent>
                    {specialties.map(spec => (
                      <SelectItem key={spec} value={spec}>{spec}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="doctorEmail">Doctor Email</Label>
                <Input
                  id="doctorEmail"
                  type="email"
                  value={doctorEmail}
                  onChange={(e) => setDoctorEmail(e.target.value)}
                  placeholder="doctor@clinic.com"
                />
              </div>
              <div>
                <Label htmlFor="doctorPhone">Phone Number</Label>
                <Input
                  id="doctorPhone"
                  type="tel"
                  value={doctorPhone}
                  onChange={(e) => setDoctorPhone(e.target.value)}
                  placeholder="+1 (555) 123-4567"
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Appointment Date & Time */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <CalendarIcon className="w-5 h-5 mr-2" />
              Date & Time
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label>Preferred Date *</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className="w-full justify-start text-left font-normal"
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {selectedDate ? format(selectedDate, 'PPP') : 'Pick a date'}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <Calendar
                    mode="single"
                    selected={selectedDate}
                    onSelect={setSelectedDate}
                    initialFocus
                    disabled={(date) => date < new Date()}
                  />
                </PopoverContent>
              </Popover>
            </div>
            <div>
              <Label htmlFor="time">Preferred Time *</Label>
              <Select value={selectedTime} onValueChange={setSelectedTime}>
                <SelectTrigger>
                  <SelectValue placeholder="Select time" />
                </SelectTrigger>
                <SelectContent>
                  {timeSlots.map(time => (
                    <SelectItem key={time} value={time}>
                      <div className="flex items-center">
                        <Clock className="w-4 h-4 mr-2" />
                        {time}
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Reason for Visit */}
        <Card>
          <CardHeader>
            <CardTitle>Reason for Visit</CardTitle>
          </CardHeader>
          <CardContent>
            <Textarea
              value={reason}
              onChange={(e) => setReason(e.target.value)}
              placeholder="Describe the reason for your visit..."
              rows={3}
            />
          </CardContent>
        </Card>

        {/* Attachments */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <FileText className="w-5 h-5 mr-2" />
              Documents to Include
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center space-x-2">
              <Checkbox
                id="healthReport"
                checked={attachHealthReport}
                onCheckedChange={(checked) => setAttachHealthReport(checked === true)}
              />
              <Label htmlFor="healthReport">Include Comprehensive Health Report</Label>
            </div>

            {medicalRecords && medicalRecords.length > 0 && (
              <div>
                <Label className="text-sm font-medium">Medical Records to Attach:</Label>
                <div className="mt-2 space-y-2">
                  {medicalRecords.map(record => (
                    <div key={record.id} className="flex items-center space-x-2">
                      <Checkbox
                        id={record.id}
                        checked={selectedMedicalRecords.includes(record.id)}
                        onCheckedChange={() => handleMedicalRecordToggle(record.id)}
                      />
                      <Label htmlFor={record.id} className="flex-1">
                        {record.title} ({record.record_type})
                      </Label>
                    </div>
                  ))}
                </div>
              </div>
            )}

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
              <p className="text-xs text-blue-700">
                Selected documents will be prepared as PDF attachments for your healthcare provider.
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Health Data Sharing */}
        <Card>
          <CardHeader>
            <CardTitle>Share Health Data</CardTitle>
          </CardHeader>
          <CardContent>
            <HealthDataSharingDialog />
            <p className="text-sm text-gray-600 mt-2">
              Use this to send your complete health report directly to your healthcare provider.
            </p>
          </CardContent>
        </Card>

        {/* Submit Button */}
        <div className="flex space-x-4">
          <Button
            type="submit"
            className="flex-1 bg-[#2ecac8] hover:bg-[#338886] text-white"
          >
            Prepare Appointment Information
          </Button>
          <Button
            type="button"
            variant="outline"
            onClick={() => navigate(-1)}
          >
            Cancel
          </Button>
        </div>
      </form>

      {/* Information Card */}
      <Card className="mt-6 bg-green-50 border-green-200">
        <CardContent className="p-4">
          <p className="text-sm text-green-800">
            ðŸ“‹ This form prepares your appointment information and relevant health documents. 
            You'll need to contact your healthcare provider directly to confirm the actual appointment booking.
          </p>
        </CardContent>
      </Card>
    </div>
  );
};

export default BookAppointmentLanding;
